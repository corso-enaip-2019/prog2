using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Test04FastPrimes
{
    [TestClass]
    public class FastPrimeTest
    {
        [TestMethod]
        [DataRow(-24, false)]
        [DataRow(-20, false)]
        [DataRow(-19, false)]
        [DataRow(-18, false)]
        [DataRow(-17, false)]
        [DataRow(-16, false)]
        [DataRow(-15, false)]
        [DataRow(-14, false)]
        [DataRow(-13, false)]
        [DataRow(-12, false)]
        [DataRow(-11, false)]
        [DataRow(-10, false)]
        [DataRow(-9, false)]
        [DataRow(-8, false)]
        [DataRow(-7, false)]
        [DataRow(-6, false)]
        [DataRow(-5, false)]
        [DataRow(-4, false)]
        [DataRow(-3, false)]
        [DataRow(-2, false)]
        [DataRow(-1, false)]
        [DataRow(0, false)] //0
        [DataRow(1, false)]
        [DataRow(2, true)]
        [DataRow(3, true)]
        [DataRow(4, false)]
        [DataRow(5, true)]
        [DataRow(6, false)]
        [DataRow(7, true)]
        [DataRow(8, false)]
        [DataRow(9, false)]
        [DataRow(10, false)]
        [DataRow(11, true)]
        [DataRow(12, false)]
        [DataRow(13, true)]
        [DataRow(14, false)]
        [DataRow(15, false)]
        [DataRow(16, false)]
        [DataRow(17, true)]
        [DataRow(18, false)]
        [DataRow(19, true)]
        [DataRow(20, false)]
        [DataRow(24, false)]
        [DataRow(2147483645, false)]
        [DataRow(2147483646, false)]
        [DataRow(2147483647, true)] //max int32 (2'147'483'647 è primo)
        public void Number_is_correctly_recognized(int n, bool expectedResult)
        { }


        [TestMethod]
        public void Negative_numbers_are_not_prime()
        {
            int to = -1024;
            for (int i = -1; i <= to; i++)
            {
                Assert.IsFalse(FastPrime.IsPrime(i));
            }
        }

        [TestMethod]
        public void Zero_is_not_prime()
        {
            Assert.IsFalse(FastPrime.IsPrime(0));
        }

        [TestMethod]
        public void One_is_not_prime()
        {
            Assert.IsFalse(FastPrime.IsPrime(1));
        }

        [TestMethod]
        public void Return_true_if_argument_is_prime()
        {
            int aPrimeInt = 17;

            Assert.IsTrue(FastPrime.IsPrime(aPrimeInt));
        }

        [TestMethod]
        public void Return_false_if_argument_is_not_prime()
        {
            int notAPrimeInt = 18;

            Assert.IsFalse(FastPrime.IsPrime(notAPrimeInt));
        }

        [TestMethod]
        public void Max_int32_argument_possible_2_147_483_647_is_prime()
        {
            int max_int32_argument_possible = 2147483647;

            Assert.IsTrue(FastPrime.IsPrime(max_int32_argument_possible));
        }

        [TestMethod]
        public void Calculate_from_a_big_number_of_prime_numbers()
        {
            int[] _600primeNumbersArray = new int[]
            {
                2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,
                73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,
                179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,
                283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,
                419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,
                547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,
                661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,
                811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,
                947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,
                1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,
                1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,
                1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,
                1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,
                1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,
                1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,
                1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,
                2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,
                2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,
                2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,
                2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,
                2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,
                2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,
                3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,
                3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,
                3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,
                3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,
                3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,
                3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,
                4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,
                4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409
            };

            foreach (int n in _600primeNumbersArray)
            {
                Assert.IsTrue(FastPrime.IsPrime(n));
            }
        }

        [TestMethod]
        public void Calculate_from_a_big_number_of_big_prime_numbers()
        {
            int[] _600BigPrimeNumbersArray = new int[]
            {
                2147470769,2147470771,2147470789,2147470823,2147470837,2147470859,2147470891,2147470903,2147470939,2147470987,
                2147471017,2147471057,2147471089,2147471111,2147471147,2147471159,2147471173,2147471177,2147471197,2147471233,
                2147471237,2147471243,2147471251,2147471273,2147471303,2147471327,2147471351,2147471387,2147471419,2147471519,
                2147471539,2147471581,2147471597,2147471611,2147471621,2147471629,2147471639,2147471647,2147471681,2147471687,
                2147471707,2147471741,2147471759,2147471831,2147471839,2147471863,2147471881,2147471891,2147471933,2147471939,
                2147471951,2147471993,2147472023,2147472037,2147472043,2147472053,2147472071,2147472091,2147472101,2147472109,
                2147472133,2147472137,2147472143,2147472161,2147472199,2147472221,2147472251,2147472259,2147472263,2147472289,
                2147472311,2147472343,2147472373,2147472377,2147472413,2147472421,2147472443,2147472449,2147472469,2147472491,
                2147472499,2147472557,2147472601,2147472611,2147472617,2147472659,2147472683,2147472689,2147472697,2147472713,
                2147472751,2147472757,2147472787,2147472797,2147472863,2147472883,2147472893,2147472917,2147472923,2147472959,
                2147473049,2147473061,2147473117,2147473121,2147473127,2147473151,2147473187,2147473217,2147473231,2147473241,
                2147473267,2147473283,2147473291,2147473297,2147473301,2147473331,2147473351,2147473369,2147473373,2147473409,
                2147473429,2147473469,2147473477,2147473483,2147473487,2147473553,2147473567,2147473579,2147473697,2147473703,
                2147473733,2147473763,2147473781,2147473787,2147473837,2147473849,2147473891,2147473897,2147473921,2147473963,
                2147474009,2147474027,2147474029,2147474071,2147474093,2147474113,2147474123,2147474149,2147474159,2147474201,
                2147474213,2147474239,2147474279,2147474359,2147474383,2147474393,2147474477,2147474479,2147474491,2147474513,
                2147474519,2147474531,2147474551,2147474597,2147474627,2147474657,2147474711,2147474717,2147474789,2147474803,
                2147474807,2147474809,2147474831,2147474837,2147474843,2147474851,2147474881,2147474887,2147474891,2147474921,
                2147474929,2147474947,2147474951,2147474963,2147475047,2147475061,2147475103,2147475107,2147475149,2147475179,
                2147475181,2147475193,2147475203,2147475221,2147475229,2147475233,2147475251,2147475257,2147475269,2147475277,
                2147475331,2147475347,2147475349,2147475367,2147475373,2147475397,2147475401,2147475413,2147475439,2147475481,
                2147475487,2147475497,2147475503,2147475509,2147475521,2147475541,2147475553,2147475559,2147475563,2147475587,
                2147475593,2147475601,2147475641,2147475653,2147475691,2147475713,2147475721,2147475739,2147475787,2147475791,
                2147475797,2147475829,2147475851,2147475859,2147475871,2147475899,2147475929,2147475971,2147475973,2147475977,
                2147475997,2147476031,2147476073,2147476087,2147476109,2147476127,2147476139,2147476141,2147476169,2147476183,
                2147476211,2147476249,2147476291,2147476321,2147476327,2147476367,2147476381,2147476399,2147476417,2147476517,
                2147476519,2147476543,2147476607,2147476619,2147476649,2147476663,2147476687,2147476693,2147476699,2147476739,
                2147476741,2147476763,2147476769,2147476777,2147476789,2147476819,2147476823,2147476841,2147476871,2147476897,
                2147476927,2147476931,2147476937,2147476943,2147476951,2147476963,2147476979,2147477021,2147477029,2147477063,
                2147477093,2147477107,2147477113,2147477159,2147477191,2147477201,2147477203,2147477207,2147477209,2147477237,
                2147477249,2147477273,2147477323,2147477393,2147477399,2147477419,2147477443,2147477467,2147477473,2147477503,
                2147477513,2147477531,2147477533,2147477599,2147477627,2147477681,2147477687,2147477699,2147477701,2147477737,
                2147477807,2147477809,2147477833,2147477851,2147477861,2147477873,2147477879,2147477881,2147477933,2147477953,
                2147477989,2147478013,2147478017,2147478049,2147478079,2147478083,2147478089,2147478127,2147478133,2147478149,
                2147478253,2147478259,2147478293,2147478299,2147478331,2147478349,2147478373,2147478461,2147478481,2147478491,
                2147478497,2147478503,2147478517,2147478521,2147478563,2147478569,2147478581,2147478601,2147478611,2147478647,
                2147478649,2147478653,2147478659,2147478661,2147478673,2147478701,2147478703,2147478719,2147478721,2147478727,
                2147478731,2147478733,2147478763,2147478791,2147478821,2147478859,2147478863,2147478889,2147478899,2147478911,
                2147478919,2147478937,2147478959,2147478961,2147478967,2147478997,2147479013,2147479031,2147479057,2147479063,
                2147479079,2147479091,2147479097,2147479121,2147479129,2147479133,2147479171,2147479189,2147479231,2147479259,
                2147479273,2147479307,2147479339,2147479349,2147479361,2147479381,2147479403,2147479421,2147479447,2147479489,
                2147479507,2147479513,2147479517,2147479531,2147479547,2147479549,2147479573,2147479589,2147479601,2147479619,
                2147479637,2147479643,2147479657,2147479681,2147479751,2147479753,2147479757,2147479781,2147479787,2147479819,
                2147479823,2147479879,2147479891,2147479897,2147479907,2147479937,2147479991,2147480009,2147480011,2147480039,
                2147480161,2147480197,2147480207,2147480219,2147480227,2147480297,2147480299,2147480311,2147480327,2147480369,
                2147480429,2147480437,2147480459,2147480471,2147480507,2147480519,2147480527,2147480551,2147480591,2147480611,
                2147480623,2147480641,2147480651,2147480677,2147480683,2147480707,2147480723,2147480743,2147480747,2147480791,
                2147480837,2147480843,2147480849,2147480893,2147480897,2147480899,2147480921,2147480927,2147480941,2147480957,
                2147480969,2147480971,2147480989,2147481019,2147481031,2147481053,2147481071,2147481139,2147481143,2147481151,
                2147481173,2147481179,2147481199,2147481209,2147481247,2147481263,2147481269,2147481283,2147481311,2147481317,
                2147481337,2147481353,2147481359,2147481367,2147481373,2147481487,2147481491,2147481499,2147481509,2147481529,
                2147481563,2147481571,2147481629,2147481673,2147481793,2147481797,2147481811,2147481827,2147481863,2147481883,
                2147481893,2147481899,2147481901,2147481907,2147481937,2147481949,2147481967,2147481997,2147482021,2147482063,
                2147482081,2147482091,2147482093,2147482121,2147482223,2147482231,2147482237,2147482273,2147482291,2147482327,
                2147482343,2147482349,2147482361,2147482367,2147482409,2147482417,2147482481,2147482501,2147482507,2147482577,
                2147482583,2147482591,2147482621,2147482661,2147482663,2147482681,2147482693,2147482697,2147482739,2147482763,
                2147482801,2147482811,2147482817,2147482819,2147482859,2147482867,2147482873,2147482877,2147482921,2147482937,
                2147482943,2147482949,2147482951,2147483029,2147483033,2147483053,2147483059,2147483069,2147483077,2147483123,
                2147483137,2147483171,2147483179,2147483237,2147483249,2147483269,2147483323,2147483353,2147483399,2147483423,
                2147483477,2147483489,2147483497,2147483543,2147483549,2147483563,2147483579,2147483587,2147483629,2147483647
            };

            foreach (int n in _600BigPrimeNumbersArray)
            {
                Assert.IsTrue(FastPrime.IsPrime(n));
            }
        }

        [TestMethod]
        public void Calculate_from_a_big_number_of_not_prime_numbers()
        {
            int[] _NotPrimeNumbersArray_LesserThen101 = new int[] { 1, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100 };
            /* 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101 */

            foreach (int n in _NotPrimeNumbersArray_LesserThen101)
            {
                Assert.IsFalse(FastPrime.IsPrime(n));
            }
        }
    }
}